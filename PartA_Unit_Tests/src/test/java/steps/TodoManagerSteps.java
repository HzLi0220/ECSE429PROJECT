package steps;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import io.cucumber.java.After;

public class TodoManagerSteps {
    private Response response;
    private String endpoint;
    private Process apiProcess;

    @Given("the Todo Manager API is running")
    public void apiRunning() {
        RestAssured.baseURI = "http://localhost:4567";
        if (!isApiRunning()) {
            startApi();
        } else {
            try {      
                given().when().get("/shutdown");
            } catch (Exception e) { } 
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            startApi();
        }
    }

    private boolean isApiRunning() {
        try {
            URL url = new URL("http://localhost:4567/todos");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.connect();
            int responseCode = connection.getResponseCode();
            return responseCode == 200;
        } catch (IOException e) {
            return false;
        }
    }

    private void startApi() {
        try {
            apiProcess = new ProcessBuilder("java", "-jar", "runTodoManagerRestAPI-1.5.5.jar").start();
            Thread.sleep(500);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Given("a project with the name {string} already exists")
    public void projectExists(String name) {
        endpoint = "/projects";
        String projectJson = "{\"title\": \"" + name + "\", \"description\": \"Autogenerated project\"}";
        given().contentType("application/json").body(projectJson).when().post(endpoint).then().statusCode(201);
    }

    @When("I send a POST request to {string} with name {string} and description {string}")
    public void postProject(String endpoint, String name, String description) {
        this.endpoint = endpoint;
        String projectJson = "{\"title\": \"" + name + "\", \"description\": \"" + description + "\"}";
        response = given().contentType("application/json").body(projectJson).when().post(this.endpoint);
    }

    @When("I send a POST request to {string} without a name")
    public void postProjectWithoutName(String endpoint) {
        this.endpoint = endpoint;
        String projectJson = "{\"description\": \"Project without a name\"}";
        response = given().contentType("application/json").body(projectJson).when().post(this.endpoint);
    }

    @Then("I should receive a response with status code {int}")
    public void checkStatusCode(int statusCode) {
        response.then().statusCode(statusCode);
    }

    @Then("the response should contain a project with name {string} and description {string}")
    public void responseContainsProject(String name, String description) {
        response.then().body("title", equalTo(name)).body("description", equalTo(description));
    }

    private void sendRequestInterop(String method, String endpoint, String Id1, String Id2)
    {
        this.endpoint = endpoint;
        if (method.equals("POST"))
        {
            String projectJson = "{id : \""+Id2+"\"}";
            response = given().contentType("application/json").body(projectJson).pathParam("id", Id1).when().post(this.endpoint);

        } else if (method.equals("DELETE"))
        {
            response = given().contentType("application/json").pathParam("id", Id2).pathParam("id2", Id1).when().delete(this.endpoint);
        }
    }
    @Given("the user sent a {string} request {string} to category {string} to project {string}")
    public void givenSendPostRequestAddCategoryProject(String method, String endpoint, String categoryId, String projectId)
    {
        sendRequestInterop(method, endpoint, categoryId, projectId);
    }
    @When("the user sends a {string} request {string} to category {string} to project {string}")
    public void whenSendPostRequestAddCategoryProject(String method, String endpoint, String categoryId, String projectId)
    {
        sendRequestInterop( method,  endpoint,  categoryId,  projectId);
    }

    @When("the user sends a {string} request {string} to todo {string} to category {string}")
    public void whenSendPostRequestAddTodoCategory(String method, String endpoint, String categoryId, String projectId)
    {
        sendRequestInterop( method,  endpoint,  categoryId,  projectId);
    }
    @When("the user sends a {string} request {string} to todo {string} to project {string}")
    public void whenSendPostRequestAddTodoProject(String method, String endpoint, String categoryId, String projectId)
    {
        sendRequestInterop( method,  endpoint,  categoryId,  projectId);
    }

}
